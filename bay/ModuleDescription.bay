/*!
 *  Bayrell Bundler
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Bundler;

use Runtime.lib;
use Runtime.fs;
use Runtime.CoreStruct;
use Runtime.Interfaces.ModuleDescriptionInterface;
use Runtime.Core.Context;
use Runtime.Core.Entity;
use Runtime.Core.LambdaChain;
use Runtime.Core.LambdaChain;
use Runtime.Core.LambdaChainDeclare;
use Bayrell.Bundler.BundlerHelper;


class ModuleDescription implements ModuleDescriptionInterface
{

	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleName() => "Bayrell.Bundler";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleVersion() => "0.10";
	
	
	
	/**
	 * Returns required modules
	 * @return Dict<string>
	 */
	pure Dict<string> requiredModules() =>
	{
		'Runtime': '>=0.3',
		'Runtime.Core': '*',
		'Runtime.Task': '*',
	};
	
	
	
	/**
	 * Returns enities
	 */
	pure Collection<Dict> entities() => 
	[
		/* Declare Layout Chain */
		new LambdaChainDeclare{ "name": BundlerHelper::CHANGE_FILE_CHAIN },
		new LambdaChainDeclare{ "name": BundlerHelper::BUILD_PROJECT },
		new LambdaChainDeclare{ "name": BundlerHelper::BUILD_FILE },
		
		/* Add Entity */
		new Entity{ "name": "Bayrell.Bundler.Tasks" },
		
		/* Extend entities */
		new LambdaChain
		{
			"name": "Runtime.Entities",
			"value": "Bayrell.Bundler.ModuleDescription::extendEntities",
		},
	];
	
	
	
	/**
	 * Extend entities
	 */
	pure Collection<CoreStruct> extendEntities(Context c, Collection<CoreStruct> entities)
	{
		/* Get plugins */
		Collection plugins = c
			-> method config(["Bayrell.Bundler", "plugins"], true)
			-> monad lib::to("Runtime.Collection", null)
		;
		
		return entities;
	}
	
	
	
	#ifdef BACKEND then
	
	
	/**
	 * Returns context settings
	 * @return Dict<string>
	 */
	pure Dict<string> appSettings(Dict env) => 
	{
		"config":
		{
			"Bayrell.Bundler": {},
		},
		"secrets":
		{
		},
		"providers":
		{
		}
	};
	
	
	
	/**
	 * Init context
	 */
	static Context appInit(Context c)
	{
		return c::init(c);
	}
	
	
	
	/**
	 * Start context
	 */
	static async Context appStart(Context c)
	{
		/* Read project.json from cwd */
		Dict json = await fs::readFile("project.json", "utf8", @.base_path) |> rtl::json_decode;
		
		log (json);
		
		/* Start */
		return await c::start(c);
		
		
		
		/* Set config */
		c <= settings <= config <= "Bayrell.Bundler" <= json;
		
		
	}
	
	#endif
	
}