/*!
 *  Bayrell Bundler
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Bundler.Plugins;

use Runtime.fs;
use Runtime.re;
use Runtime.BaseStruct;
use Runtime.Core.Context;
use Runtime.Core.Entity;
use Runtime.Core.LambdaChain;
use Runtime.Task.TaskDriver;
use Bayrell.Bundler.BundlerController;
use Bayrell.Bundler.ChainFile;
use Bayrell.Bundler.Plugin;
use Bayrell.Lang.Exceptions.ParserError;
use Bayrell.Lang.Exceptions.DeclaredClass;
use Bayrell.Lang.LangBay.ParserBay;
use Bayrell.Lang.LangES6.TranslatorES6;
use Bayrell.Lang.LangNode.TranslatorNode;
use Bayrell.Lang.LangPHP.TranslatorPHP;
use Bayrell.Lang.CoreTranslator;
use Bayrell.Lang.LangUtils;


static class BayLang extends Plugin
{
	
	/**
	 * Extend entities
	 */
	pure Collection<BaseStruct> extendEntities(Context c, Collection<BaseStruct> entities) =>
		entities
			
			.pushIm
			(
				new LambdaChain
				{
					"name": BundlerController::CHAIN_BUILD_FILE,
					"value": "Bayrell.Bundler.Plugins.BayLang::readFile",
					"is_async": true,
					"pos": BundlerController::BUILD_FILE_READ_FILE,
				}
			)
			
			.pushIm
			(
				new LambdaChain
				{
					"name": BundlerController::CHAIN_BUILD_FILE,
					"value": "Bayrell.Bundler.Plugins.BayLang::parseFile",
					"is_async": true,
					"pos": BundlerController::BUILD_FILE_PARSE_FILE,
				}
			)
			
			.pushIm
			(
				new LambdaChain
				{
					"name": BundlerController::CHAIN_BUILD_FILE,
					"value": "Bayrell.Bundler.Plugins.BayLang::saveFile",
					"is_async": true,
					"pos": BundlerController::BUILD_FILE_SAVE_FILE,
				}
			)
	;
	
	
	
	/**
	 * Check file
	 */
	static bool check(ChainFile file)
	{
		if (file.stop) return false;
		if (file.getBayPath() == "") return false;
		if (file.module == null) return false;
		if (file.ext != "bay" and file.ext != "ui") return false;
		return true;
	}
	
	
	
	/**
	 * Read file
	 */
	async static ChainFile readFile(BundlerController control, ChainFile file)
	{
		if (not static::check(file)) return [control, file];
		if (file.content != "") return [control, file];
		
		/* Read file */
		string content = await fs::readFile(file.file_path, @.base_path, "utf8");
		file <= content <= content;
		
		return [control, file]
	}
	
	
	
	/**
	 * Parse file
	 */
	async static ChainFile parseFile(BundlerController control, ChainFile file)
	{
		if (not static::check(file)) return [control, file];
		if (file.content == "") return [control, file];
		
		/* Parse file */
		ParserBay parser = new ParserBay();
		try
		{
			var ast = LangUtils::parse(parser, file.content);
			file <= ast <= ast;
		}
		catch (DeclaredClass e)
		{
			file <= ast <= null;
			file <= parse_error <= e;
		}
		catch (ParserError e)
		{
			file <= parse_error <= e;
			control.writeln( "Parser error: " ~ e.getErrorMessage() );
		}
		
		return [control, file]
	}
	
	
	
	/**
	 * Save file
	 */
	async static ChainFile saveFile(BundlerController control, ChainFile file)
	{
		if (not static::check(file)) return [control, file];
		if (file.ast == null) return [control, file];
		
		/* Save file to other languages */
		for (int i=0; i<control.languages.count(); i++)
		{
			string lang = control.languages.item(i);
			CoreTranslator translator = static::getTranslator(control, file, lang);
			if (translator == null)
			{
				continue;
			}
			
			/* Get destination path */
			string file_path = static::getDestFilePath(control, file, lang);
			bool is_skip = false;
			string content = "";
			
			try
			{
				/* Translate */
				content = LangUtils::translate(translator, file.ast);
			}
			catch (DeclaredClass e)
			{
				is_skip = true;
			}
			if (is_skip)
			{
				continue;
			}
			
			/* Save to file */
			string dir_name = rs::dirname(file_path);
			await fs::mkdir(dir_name, @.base_path);
			await fs::saveFile(file_path, content, @.base_path, "utf8");
			if (control.log_files)
			{
				control.writeln( "=>" ~ fs::concat(@.base_path, file_path) );
			}
		}
		
		/* Output ok */
		if (control.log_files) control.writeln( "Ok" );
		
		return [control, file]
	}
	
	
	
	/**
	 * Get dest file path
	 */
	pure string getDestFilePath(BundlerController control, ChainFile file, string lang)
	{
		string file_path = fs::concatArr([file.module.getPath(), lang, file.getBayPath()]);
		
		if (lang == "php")
		{
			file_path = re::replace("\\.bay$", ".php", file_path);
			file_path = re::replace("\\.ui$", ".php", file_path);
		}
		else if (lang == "es6")
		{
			file_path = re::replace("\\.bay$", ".js", file_path);
			file_path = re::replace("\\.ui$", ".js", file_path);
		}
		else if (lang == "nodejs")
		{
			file_path = re::replace("\\.bay$", ".js", file_path);
			file_path = re::replace("\\.ui$", ".js", file_path);
		}
		else
		{
			return "";
		}
		
		return file_path;
	}
	
	
	
	/**
	 * Get translator
	 */
	pure CoreTranslator getTranslator(BundlerController control, ChainFile file, string lang)
	{
		/* Get config */
		Dict conf = control.config
			|> "options", "Bayrell.Bundler.Plugins.BayLang", { lang }
			|> default Dict {}
		;
		
		bool backend = conf["backend"] |> default bool false;
		bool frontend = conf["frontend"] |> default bool false;
		bool enable_context = conf["enable_context"] |> default bool false;
		bool enable_check_types = conf["enable_check_types"] |> default bool false;
		bool enable_async_await = conf["enable_async_await"] |> default bool true;
		bool enable_introspection = conf["enable_introspection"] |> default bool false;
		bool emulate_async_await = conf["emulate_async_await"] |> default bool false;
		bool use_module_name = conf["use_module_name"] |> default bool false;
		bool use_strict = conf["use_strict"] |> default bool false;
		
		if (lang == "php")
		{
			/* Create translator */
			return new TranslatorPHP
			{
				"backend": backend,
				"frontend": frontend,
				"enable_context": enable_context,
				"enable_check_types": enable_check_types,
				"enable_introspection": enable_introspection,
			};
		}
		if (lang == "es6")
		{
			/* Create translator */
			return new TranslatorES6
			{
				"backend": backend,
				"frontend": frontend,
				"enable_context": enable_context,
				"enable_check_types": enable_check_types,
				"enable_async_await": enable_async_await,
				"enable_introspection": enable_introspection,
				"emulate_async_await": emulate_async_await,
				"use_module_name": use_module_name,
				"use_strict": use_strict,
			};
		}
		if (lang == "nodejs")
		{
			/* Create translator */
			return new TranslatorNode
			{
				"backend": backend,
				"frontend": frontend,
				"enable_context": enable_context,
				"enable_check_types": enable_check_types,
				"enable_async_await": enable_async_await,
				"enable_introspection": enable_introspection,
				"emulate_async_await": emulate_async_await,
				"use_module_name": use_module_name,
				"use_strict": use_strict,
			};
		}
		return null;
	}
	
	
}