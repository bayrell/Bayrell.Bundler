/*!
 *  Bayrell Bundler
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Bundler.Plugins;

use Runtime.fs;
use Runtime.BaseStruct;
use Runtime.Core.Context;
use Runtime.Core.Entity;
use Runtime.Core.LambdaChain;
use Runtime.Task.TaskDriver;
use Bayrell.Bundler.BundlerController;
use Bayrell.Bundler.ChainBundle;
use Bayrell.Bundler.Module;
use Bayrell.Bundler.ModuleFile;
use Bayrell.Bundler.Plugin;


static class Bundle extends Plugin
{
	
	/**
	 * Extend entities
	 */
	pure Collection<BaseStruct> extendEntities(Context c, Collection<BaseStruct> entities) =>
		entities
			.pushIm
			(
				new LambdaChain
				{
					"name": BundlerController::CHAIN_BUNDLE,
					"value": "Bayrell.Bundler.Plugins.Bundle::bundle",
					"is_async": true,
					"pos": 1000,
				}
			)
			.pushIm
			(
				new LambdaChain
				{
					"name": BundlerController::CHAIN_BUNDLE,
					"value": "Bayrell.Bundler.Plugins.Bundle::saveFile",
					"is_async": true,
					"pos": 2000,
				}
			)
	;
	
	
	
	/**
	 * Bundle
	 */
	static async ChainBundle bundle(BundlerController control, ChainBundle chain)
	{
		Vector<string> assets_content = new Vector();
		Collection<Module> modules = chain.modules;
		
		for (int i=0; i<modules.count(); i++)
		{
			var module = modules.item(i);
			
			/* if module */
			if (module instanceof Module)
			{
				string module_path = module.getPath();
				string module_json_path = fs::concat(module_path, "module.json");
				
				/* Read module.json */
				Dict module_json = await fs::readFile(module_json_path, "utf8", @.base_path)
					|> rtl::json_decode
					|> default {}
				;
				
				/* Get module assets */
				Collection<string> assets = module_json |> "assets" |> default Collection [];
				for (int j=0; j<assets.count(); j++)
				{
					string file_name = assets.item(j);
					string file_path = "";
					
					if (file_name[0] == "@")
					{
						file_name = rs::substr(file_name, 1);
						file_path = fs::concat(module_path, "resources", file_name);
					}
					else
					{
						file_path = fs::concat(module_path, "es6", file_name) ~ ".js";
					}
					
					/* Check file */
					if (not static::checkFile(chain, file_path))
					{
						continue;
					}
					
					/* Read file */
					bool file_exists = await fs::exists(file_path, @.base_path);
					if (file_exists)
					{
						string file_content = await fs::readFile(file_path, "utf8", @.base_path);
						if (file_content != "") assets_content.push(file_content);
					}
				}
			}
			
			/* if module file */
			else if (module instanceof ModuleFile)
			{
				string file_path = module.getPath();
				
				/* Check file */
				if (not static::checkFile(chain, file_path))
				{
					continue;
				}
				
				/* Read file */
				bool file_exists = await fs::exists(file_path, @.base_path);
				if (file_exists)
				{
					string file_content = await fs::readFile(file_path, "utf8", @.base_path);
					if (file_content != "") assets_content.push(file_content);
				}
			}
		}
		
		chain <= bundle_content <= rs::join("\n", assets_content);
		
		return [control, chain];
	}
	
	
	
	/**
	 * Check file
	 */
	pure bool checkFile(ChainBundle chain, string file_path)
	{
		string ext = rs::extname(file_path);
		if (chain.lang == "es6" and ext == "js") return true;
		if (chain.lang == "css" and ext == "css") return true;
		return false;
	}
	
	
	
	/**
	 * Save file
	 */
	static async ChainBundle saveFile(BundlerController control, ChainBundle chain)
	{
		string file_dest_path = chain.dest;
		string file_dest_dir_name = rs::dirname(file_dest_path);
		string bundle_content = chain.bundle_content;
		
		/* Make dir */
		await fs::mkdir(file_dest_dir_name, @.base_path);
		
		/* Save file */
		await fs::saveFile(file_dest_path, bundle_content, "utf8", @.base_path);
		
		/* Output */
		control.writeln( "Bundle to => " ~ file_dest_path );
		
		return [control, chain];
	}
	
}