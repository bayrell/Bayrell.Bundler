/*!
 *  Bayrell Bundler
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Bundler;

use Runtime.fs;
use Runtime.rs;
use Runtime.BaseStruct;
use Runtime.Exceptions.RuntimeException;
use Bayrell.Bundler.BundlerController;
use Bayrell.Bundler.Module;


struct ChainFile extends BaseStruct
{
	string file_path = "";
	string ext = "";
	Module module = null;
	string content = "";
	var ast = null;
	bool stop = false;
	RuntimeException parse_error = null;
	bool log_files = true;
	
	
	/**
	 * Returns relative module path
	 */
	string getBayPath()
	{
		if (this.module == null) return "";
	
		string module_path = fs::addFirstSlash( this.module.getPath() );
		string file_path = fs::addFirstSlash( this.file_path );
		Collection<string> module_path_arr = rs::explode(fs::DIRECTORY_SEPARATOR, module_path);
		Collection<string> file_path_arr = rs::explode(fs::DIRECTORY_SEPARATOR, file_path);
		
		int i = 0;
		while
		(
			i < module_path_arr.count() and i < file_path_arr.count() and
			module_path_arr[i] == file_path_arr[i]
		)
			i++
		;
		
		if (i < file_path_arr.count() and file_path_arr[i] == "bay")
		{
			return fs::DIRECTORY_SEPARATOR ~ rs::join(fs::DIRECTORY_SEPARATOR, file_path_arr.slice(i + 1));
		}
		
		return "";
	}
	
	
	
	/**
	 * Check file
	 * Chain: BundlerController::CHAIN_BUILD_FILE_CHECK
	 */
	static ChainFile checkFile(BundlerController control, ChainFile file)
	{
		if (file.stop) return file.copy{ "stop": true };
		if (file.getBayPath() == "") return file.copy{ "stop": true };
		if (file.module == null) return file.copy{ "stop": true };
		return [ control, file ];
	}
	
}