/*!
 *  Bayrell Bundler
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Bundler;

use Runtime.fs;
use Runtime.lib;
use Runtime.Task.TaskList;
use Runtime.Task.TaskMethod;
use Runtime.Task.TaskOutputProvider;
use Bayrell.Bundler.BuildModule;
use Bayrell.Bundler.BundlerHelper;
use Bayrell.Bundler.Module;


@TaskList{}
class Tasks
{
	
	/**
	 * Watch changes
	 */
	@TaskMethod{ "alias": "watch" }
	static async void watch()
	{
	}
	
	
	
	/**
	 * Build project
	 */
	/*
	@TaskMethod{ "alias": "build" }
	static async void build()
	{
	}
	*/
	
	
	
	/**
	 * Show modules
	 */
	@TaskMethod{ "alias": "modules" }
	static async void modules()
	{
		TaskOutputProvider output = @.getProvider(classof TaskOutputProvider);
		Collection<string> modules = await BundlerHelper::getModules();
		
		/* Output list of modules */
		output.writeln("Modules:");
		modules.each
		(
			void (Module item) use (output)
			{
				output.writeln("  " ~ item.module_name)
			}
		);
	}
	
	
	
	/**
	 * Make symlink
	 */
	static async void make_link(string module_path, string assets_path, string kind)
	{
		TaskOutputProvider output = @.getProvider(classof TaskOutputProvider);
		string src = fs::concat(module_path, kind);
		string dest = fs::concat(assets_path, kind);
		string rel = fs::relative(assets_path, src);
		
		await fs::mkdir(assets_path, @.base_path);
		if (await fs::exists(src, @.base_path))
		{
			await fs::unlink(dest, @.base_path);
			await fs::symlink(rel, dest, @.base_path);
			output.writeln(fs::concat(@.base_path, dest) ~ " -> " ~ rel);
		}
	}
	
	
	
	/**
	 * Make symlinks
	 */
	@TaskMethod{ "alias": "make_symlinks" }
	static async void make_symlinks()
	{
		Collection<Module> modules = await BundlerHelper::getModules();
		for (int i=0; i<modules.count(); i++)
		{
			Module module = modules.item(i);
			
			string module_path = fs::concat(module.relative_path, module.module_name);
			string assets_path = fs::concat("/web/assets/", module.module_name);
			
			/* Resources folder */
			static::make_link(module_path, assets_path, "resources");
			
			/* ES6 folder */
			static::make_link(module_path, assets_path, "es6");
		}
		
	}
	
	
	
	/**
	 * Make module
	 */
	@TaskMethod{ "alias": "make" }
	static async void make()
	{
		int sz = @.cli_args.count();
		string module_name = @.cli_args.get(2, "");
		Collection<Module> modules = await BundlerHelper::getModules();
		TaskOutputProvider output = @.getProvider(classof TaskOutputProvider);
		Module module = modules.findItem( lib::equalAttr("module_name", module_name) );
		
		if (module_name == "")
		{
			output.writeln("Type module name:");
			modules.each
			(
				void (Module item) use (output)
				{
					output.writeln("  " ~ item.module_name)
				}
			);
			return;
		}
		else if (module == -1)
		{
			output.writeln("Wrong module name " ~ module_name);
			return;
		}
		
		/* Chain module build */
		await @.chainAwait
		(
			BundlerHelper::BUILD_MODULE,
			[
				new BuildModule
				{
					"module": module
				}
			]
		);
		
	}
	
	
	
	/**
	 * Make all modules
	 */
	@TaskMethod{ "alias": "make_all" }
	static async void make_all()
	{
	}
	
}

