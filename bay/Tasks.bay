/*!
 *  Bayrell Bundler
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Bundler;

use Runtime.fs;
use Runtime.rs;
use Runtime.lib;
use Runtime.Task.TaskList;
use Runtime.Task.TaskMethod;
use Runtime.Task.TaskDriver;
use Bayrell.Bundler.ChainBundle;
use Bayrell.Bundler.ChainFile;
use Bayrell.Bundler.ChainModule;
use Bayrell.Bundler.BundlerController;
use Bayrell.Bundler.Inotify;
use Bayrell.Bundler.Module;


@TaskList{}
class Tasks
{
	
	
	/**
	 * Change File
	 */
	static async void onChangeFile(Inotify inotify, string file_name)
	{
		BundlerController control = await BundlerController::getController();
		
		if (rs::strpos(file_name, @.base_path) != 0) return;
		
		string file_path = rs::substr( file_name, rs::strlen(@.base_path) );
		Module module = BundlerController::findModule(control.modules, file_path);
		
		/* Create build container */
		ChainFile file = new ChainFile
		{
			"module": module,
			"file_path": file_path,
			"ext": rs::extname(file_path),
		};
		
		/* Build file */
		file = control.chainBuildCheckFile(file);
		if (not file.stop)
		{
			control.writeln( fs::concat(@.base_path, file_path) );
			await control.chainBuildFile(file);
			
			/* Bundle */
			await control.bundleByModule(module.module_name);
		}
	}
	
	
	
	/**
	 * Watch changes
	 */
	@TaskMethod{ "alias": "watch" }
	static async void task_watch()
	{
		BundlerController control = await BundlerController::getController();
		control.log_files = true;
		
		/* Get notify driver */
		Inotify inotify = new Inotify("bundler-inotify");
		await inotify.createNotify();
		inotify.onChangeFile = method static::onChangeFile;
		inotify.changeTimeout = 500;
		@.addObject(inotify);
		
		Collection<string> modules_dir = control.config |> "modules" |> default Collection [];
		for (int i=0; i<modules_dir.count(); i++)
		{
			string dir = modules_dir.item(i);
			string dir_path = fs::concat(@.base_path, dir);
			await inotify.addFolder(dir_path);
		}
		
		control.writeln("Start watch");
		while (true)
		{
			await rtl::sleep(100);
		}
	}
	
	
	
	/**
	 * Build project
	 */
	@TaskMethod{ "alias": "build" }
	static async void task_build()
	{
		Map<bool> builded_modules = new Map();
		BundlerController control = await BundlerController::getController();
		
		string bundle_name = @.cli_args.get(2, "");
		Collection<Dict> bundles = control.config |> "bundles" |> default [];
		Dict find_bundle = null;
		
		if (bundle_name == "")
		{
			control.writeln("Type bundle name:");
			bundles.each
			(
				void (Dict item) use (control)
				{
					if (item.has("name"))
					{
						control.writeln("  " ~ item["name"])
					}
				}
			);
		}
		
		/* Find bundle by name */
		find_bundle = bundles.findItem( lib::equalAttr( "name", bundle_name ) );
		if (find_bundle == null)
		{
			control.writeln("Wrong bundle name " ~ bundle_name);
			return;
		}
		
		/* Get bundle modules */
		Collection<string> bundle_modules = find_bundle |> "modules" |> default Collection [];
		
		/* Make bundle modules */
		for (int i=0; i<control.modules.count(); i++)
		{
			Module module = control.modules.item(i);
			
			/* Find module name */
			int pos = bundle_modules.indexOf(module.module_name);
			if (pos == -1) continue;
			
			await control.chainBuildModuleByName(module.module_name);
			builded_modules.set(module.module_name, true);
		}
		
		/* Build modules */
		for (int j=0; j<bundle_modules.count(); j++)
		{
			string module_name = bundle_modules.item(j);
			if (builded_modules.has(module_name)) continue;
			if (module_name[0] == "@") continue;
			
			await control.chainBuildModuleByName(module_name);
			builded_modules.set(module_name, true);
		}
		
		/* Make bundle */
		await control.chainBundle(find_bundle);
	}
	
	
	
	/**
	 * Build project
	 */
	@TaskMethod{ "alias": "build_all" }
	static async void task_build_all()
	{
		Map<bool> builded_modules = new Map();
		BundlerController control = await BundlerController::getController();
		Collection<Dict> bundles = control.config |> "bundles" |> default [];
		
		/* Make all modules */
		for (int i=0; i<control.modules.count(); i++)
		{
			Module module = control.modules.item(i);
			
			await control.chainBuildModuleByName(module.module_name);
			builded_modules.set(module.module_name, true);
		}
		
		/* Build all bundles */
		for (int i=0; i<bundles.count(); i++)
		{
			Dict bundle_conf = bundles.item(i);
			
			/* Get modules */
			Collection<string> bundle_modules = bundle_conf |> "modules" |> default Collection [];
			
			/* Build modules */
			for (int j=0; j<bundle_modules.count(); j++)
			{
				string module_name = bundle_modules.item(j);
				if (builded_modules.has(module_name)) continue;
				if (module_name[0] == "@") continue;
				
				await control.chainBuildModuleByName(module_name);
				builded_modules.set(module_name, true);
			}
			
			/* Make bundle */
			await control.chainBundle(bundle_conf);
		}
	}
	
	
	
	/**
	 * Make module
	 */
	@TaskMethod{ "alias": "make" }
	static async void task_make()
	{
		int sz = @.cli_args.count();
		string module_name = @.cli_args.get(2, "");
		BundlerController control = await BundlerController::getController();
		Module module = control.findModuleByName(module_name);
		
		if (module_name == "")
		{
			control.writeln("Type module name:");
			control.modules.each
			(
				void (Module item) use (control)
				{
					control.writeln("  " ~ item.module_name)
				}
			);
			return;
		}
		else if (module == null)
		{
			control.writeln("Wrong module name " ~ module_name);
			return;
		}
		
		/* Run module build chain */
		await control.chainBuildModuleByName(module_name);
		
		/* Build bundles */
		Collection<Dict> build_items = control.config |> "bundles" |> default [];
		for (int i=0; i<build_items.count(); i++)
		{
			Dict bundle_conf = build_items.item(i);
			
			/* Get modules */
			Collection<string> build_modules = bundle_conf |> "modules" |> default Collection [];
			
			/* Find module name */
			int pos = build_modules.indexOf(module_name);
			if (pos != -1)
			{
				/* Make bundle */
				await control.chainBundle(bundle_conf);
			}
		}
	}
	
	
	
	/**
	 * Show modules
	 */
	@TaskMethod{ "alias": "modules" }
	static async void task_modules()
	{
		BundlerController control = await BundlerController::getController();
		
		/* Output list of modules */
		control.output.writeln("Modules:");
		control.modules.each
		(
			void (Module item) use (control)
			{
				control.output.writeln("  " ~ item.module_name)
			}
		);
	}
	
	
	
	/**
	 * Make symlink
	 */
	static async void make_link(string module_path, string assets_path, string kind)
	{
		module_path = fs::addFirstSlash(module_path);
		assets_path = fs::addFirstSlash(assets_path);
		string src = fs::concat(module_path, kind);
		string dest = fs::concat(assets_path, kind);
		string rel = fs::relative(assets_path, src);
		
		if (await fs::exists(src, @.base_path))
		{
			await fs::mkdir(assets_path, @.base_path);
			if (await fs::exists(src, @.base_path))
			{
				await fs::unlink(dest, @.base_path);
				await fs::symlink(rel, dest, @.base_path);
				
				TaskDriver output = @.getDriver(classof TaskDriver);
				output.writeln(fs::concat(@.base_path, dest) ~ " -> " ~ rel);
			}
		}
	}
	
	
	
	/**
	 * Make symlinks
	 */
	@TaskMethod{ "alias": "make_symlinks" }
	static async void task_make_symlinks()
	{
		BundlerController control = await BundlerController::getController();
		string assets_dir = control.config |> "assets" |> default string "assets/";
		for (int i=0; i<control.modules.count(); i++)
		{
			Module module = control.modules.item(i);
			
			string module_path = fs::concat(module.lib_path, module.module_name);
			string assets_path = fs::concat(assets_dir, module.module_name);
			
			/* Resources folder */
			await static::make_link(module_path, assets_path, "resources");
			
			/* ES6 folder */
			/*static::make_link(module_path, assets_path, "es6");*/
		}
		
	}
	
	
}

